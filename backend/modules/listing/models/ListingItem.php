<?php

namespace backend\modules\listing\models;

use backend\components\MActiveRecord;
use common\helpers\Myfunctions;
use Yii;

/**
 * This is the model class for table "mod_listing_item".
 *
 * @property int $id
 * @property int $category_id
 * @property string $category_name category seo name
 * @property string $item_title
 * @property string|null $item_seo seo link
 * @property string|null $item_author
 * @property string|null $item_date
 * @property string|null $html_content detail html
 * @property string|null $html_list list item html
 * @property string|null $html_widget top list widget html content
 * @property int $item_order
 * @property int $widget display in top list widget
 * @property int $widget_order order in widget if ordered by number
 * @property int $status
 * @property int $archive
 * @property int $created_by
 * @property string $created_on
 * @property int $modify_by
 * @property string $modify_on
 * @property int $deleted
 */
class ListingItem extends MActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'mod_listing_item';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id', 'status', ], 'integer'],
            [['item_date'], 'date', 'format'=>'php:Y-m-d'],
            [['item_title','html_content', 'html_list',], 'required'],
            [['html_content', 'html_list'], 'string'],
            [['created_on', 'modify_on', 'created_by', 'modify_by', 'html_widget', 'widget', 'widget_order', 'item_order', 'category_name', 'archive', 'deleted','item_seo'], 'safe'],
            //[['category_name', 'item_title', ], 'string', 'max' => 60],
            [['item_author'], 'string', 'max' => 64],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Category ID',
            'category_name' => 'Category seo name',
            'item_title' => 'Title',
            'item_seo' => 'Seo link',
            'item_author' => 'Author',
            'item_date' => 'Date',
            'html_content' => 'Content',
            'html_list' => 'Content for list',
            'html_widget' => 'Content For Widget',
            'item_order' => 'Item Order',
            'widget' => 'Use Widget',
            'widget_order' => 'Widget Order',
            'status' => 'Status',
            'archive' => 'Archive',
            'created_by' => 'Created By',
            'created_on' => 'Created On',
            'modify_by' => 'Modify By',
            'modify_on' => 'Modify On',
            'deleted' => 'Deleted',
        ];
    }

    public function getCategory()
    {
        return $this->hasOne(ListingCategory::className(), ['id' => 'category_id']);
    }

    public function beforeValidate()
    {
        $this->category_name = $this->category->cat_seo;
        $this->item_seo = Myfunctions::parseForSEO($this->item_title);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public static function findItemsByCategory($cat)
    {
        return self::find()
            ->where([
                'category_id' => $cat,
                'status' => 1,
                'deleted' => 0])
            ->select([
                'item_title',
                'item_author',
                //'item_date',
                'item_seo',
                'created_on',
                //'html_content',
                'html_list',])
            ->orderBy(['created_on' => SORT_DESC]);
    }

    public static function findItemBySeoLink($link)
    {
        return self::findOne(['item_seo' => $link]);
    }

    public function getHtmlListImgSrc()
    {
        return Myfunctions::extractImgSrc($this->html_list);
    }

    public function removeImgTags()
    {
        $html_list = str_replace(['<img>', '</img>'], " " , $this->html_list);
        return strip_tags($html_list);
    }
}

